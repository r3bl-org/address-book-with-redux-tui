/*
 *   Copyright (c) 2022 R3BL LLC
 *   All rights reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

use std::{error::Error, fmt::Display};

use chrono::{DateTime, FixedOffset};
use r3bl_rs_utils::make_api_call_for;
use serde::{Deserialize, Deserializer, Serialize};

const ENDPOINT: &str = "http://192.168.1.3/air-data/latest";

make_api_call_for! {
  AwairDataResponse at ENDPOINT
}

/// # Useful links:
/// - Code generated by: https://quicktype.io
/// - serde_as guide:
///   - https://docs.rs/serde_with/latest/serde_with/guide/serde_as/index.html
///   - https://docs.rs/serde_with/latest/serde_with/guide/index.html#1-a-more-flexible-and-composable-replacement-for-the-with-annotation-called-serde_as-v150
/// - Time format:
///   - https://datatracker.ietf.org/doc/html/rfc3339#section-5.8
///
/// # Using `serde`:
/// Add the following to your `Cargo.toml`:
/// - `serde = { version = "1.0", features = ["derive"] }`
///
/// # Using `chrono` and `serde`:
/// Add this to your `Cargo.toml`:
/// 1. `chrono = { version = "0.4.19", features = ["serde", "rustc-serialize"]
/// }` 2. `serde_json = "1.0"`
///
/// # Using `#[serde(rename = "...")]` to rename fields:
/// - https://serde.rs/field-attrs.html
///
/// # Using `deserialize_with` to convert fields to given types:
/// - See [`from_c_to_f`], and [`from_rfc3339_str_to_date_time`].
/// - https://serde.rs/field-attrs.html#deserialize_with
/// - https://play.integer32.com/?version=stable&mode=debug&edition=2018&gist=83c99d83e5bf34c0238c0aaf900135a8
/// - https://www.tousu.in/qa/?qa=463981/
#[derive(Serialize, Deserialize, Debug)]
pub struct AwairDataResponse {
  #[serde(rename = "timestamp", deserialize_with = "from_rfc3339_str_to_date_time")]
  date_time: DateTime<FixedOffset>, /* Renamed field, original field `timestamp: String`. */

  #[serde(rename = "temp", deserialize_with = "from_c_to_f")]
  temp_f: f64, /* Renamed field, original field `temp: f64`. */

  score: i64,
  dew_point: f64,
  humid: f64,
  abs_humid: f64,
  co2: i64,
  co2_est: i64,
  co2_est_baseline: i64,
  voc: i64,
  voc_baseline: i64,
  voc_h2_raw: i64,
  voc_ethanol_raw: i64,
  pm25: i64,
  pm10_est: i64,
}

fn from_c_to_f<'de, D>(deserializer: D) -> Result<f64, D::Error>
where
  D: Deserializer<'de>,
{
  let value_f64_c: f64 = Deserialize::deserialize(deserializer)?;
  let value_f64_f = value_f64_c * 1.8 + 32.0;
  Ok(value_f64_f)
}

/// https://docs.rs/chrono/latest/chrono/struct.DateTime.html#method.parse_from_rfc3339
fn from_rfc3339_str_to_date_time<'de, D>(deserializer: D) -> Result<DateTime<FixedOffset>, D::Error>
where
  D: Deserializer<'de>,
{
  // Original string eg: `2022-04-12T00:31:22.358Z`
  let value_str: &str = Deserialize::deserialize(deserializer)?;
  let date_time = DateTime::parse_from_rfc3339(value_str).unwrap();
  Ok(date_time)
}
